g.V($person1Id).shortestPath().
                    with(ShortestPath.target, __.hasId($person2Id)).
                    with(ShortestPath.includeEdges, false).
                    with(ShortestPath.maxDistance, 10000).
                    with(ShortestPath.edges, bothE('knows')).
                    with(ShortestPath.distance, __.project('case1Count', 'case2Count')
.by(
__.match(
  __.as('knowsEdge').inV().as('personA'),
  __.as('knowsEdge').outV().as('personB'),
  __.as('personB').in('hasCreator').hasLabel('Post').as('post'),
  __.as('post').in('containerOf').hasLabel('Forum').has('creationDate',gte($startDate)).has('creationDate',lte($endDate)),
  __.as('post').in('replyOf').hasLabel('Comment').as('c'),
  __.as('c').out('hasCreator').as('personA'),
  ).select('c').count()
)
.by(
__.match(
  __.as('knowsEdge').inV().as('personA'),
  __.as('knowsEdge').outV().as('personB'),
  __.as('personB').in('hasCreator').hasLabel('Comment').as('c2'),
  __.as('c2').out('rootPost').hasLabel('Post').in('containerOf').hasLabel('Forum').has('creationDate',gte($startDate)).has('creationDate',lte($endDate)),
  __.as('c2').in('replyOf').as('c1'),
  __.as('c1').out('hasCreator').as('personA')
  ).select('c1').count()
).math('1/(case1Count + case2Count * 0.5 + 1)'))
.values('weight')