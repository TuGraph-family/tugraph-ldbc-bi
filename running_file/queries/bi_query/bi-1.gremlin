g.V().hasLabel('Comment','Post').has('creationDate',lt($datetime))
.count().aggregate('totalCount')
.V().hasLabel('Comment','Post').has('creationDate',lt($datetime)).has('content',nisNull())
.project('msgId','year','length','isComment','lengthCategory')
.by(__.id())
.by(__.values('creationDate').map{new Date(it.get()).getYear() + 1900})
.by(__.values('length'))
.by(__.choose(hasLabel('Post'),__.constant(false),__.constant(true)))
.by(__.choose(has('length',between(0,40)),constant(0),
    __.choose(has('length',between(40,80)),constant(1),
    __.choose(has('length',between(80,160)),constant(2),constant(3)))))
.group().by(select('year','isComment','lengthCategory')).unfold()
.project('year','isComment','lengthCategory','messageCount','averageMessageLength','sumMessageLength','totalCount1')
.by(select(keys).select('year'))
.by(select(keys).select('isComment'))
.by(select(keys).select('lengthCategory'))
.by(select(values).unfold().count())
.by(select(values).unfold().select('length').mean())
.by(select(values).unfold().select('length').sum())
.by(cap('totalCount').unfold())
.project('year','isComment','lengthCategory','messageCount','averageMessageLength','sumMessageLength','percentageOfMessages')
.by(select('year'))
.by(select('isComment'))
.by(select('lengthCategory'))
.by(select('messageCount'))
.by(select('averageMessageLength'))
.by(select('sumMessageLength'))
.by(math('messageCount / (totalCount1 * 1.0)'))
.order()
.by(select('year'),desc)
.by(select('isComment'),asc)
.by(select('lengthCategory'),asc)