g.V().hasLabel('Country').has('name','$country')
.in('isPartOf').hasLabel('City')
.in('isLocatedIn').hasLabel('Person').has('creationDate',lt($endDate)).as('candidatePerson')
.project('personId','months','messageCount')
.by(id())
.by(values('creationDate').map{Date curDate = new Date(it.get());Date endDate = new Date($endDate);(endDate.getYear() - curDate.getYear()) * 12 + endDate.getMonth() - curDate.getMonth() + 1})
.by(__.in('hasCreator').hasLabel('Post','Comment').has('creationDate',lt($endDate)).count())
.project('personId','avgMessageCount')
.by(select('personId'))
.by(math('messageCount / months')).where(select('avgMessageCount').is(lt(1)))
.aggregate('zombies').by(select('personId')).select('candidatePerson')
.project('zombie.id','totalLikeCount','zombieLikeCount')
.by(id())
.by(__.in('hasCreator').hasLabel('Post','Comment').in('likes').has('creationDate',lt($endDate)).count())
.by(__.in('hasCreator').hasLabel('Post','Comment').in('likes').id().where(within('zombies')).count())
.project('zombie.id','totalLikeCount','zombieLikeCount','zombieScore')
.by(select('zombie.id'))
.by(select('zombieLikeCount'))
.by(select('totalLikeCount'))
.by(__.choose(select('totalLikeCount').is(gt(0)),math('zombieLikeCount / totalLikeCount'),constant(0.0)))
.order().by(select('zombieScore'),desc).by(select('zombie.id'),asc)
.limit(100)